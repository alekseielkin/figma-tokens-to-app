let fs,fetch,getColors,getTypography,getSpacing,getShadows,getBreakpoints,getRadius;_b5a‚Äç.x([["default",()=>_b5a‚Äç.o]]);_b5a‚Äç.w("fs",[["default",["fs"],function(v){fs=v}]]);_b5a‚Äç.w("node-fetch",[["default",["fetch"],function(v){fetch=v}]]);_b5a‚Äç.w("./types/getColors",[["default",["getColors"],function(v){getColors=v}]]);_b5a‚Äç.w("./types/getTypography",[["default",["getTypography"],function(v){getTypography=v}]]);_b5a‚Äç.w("./types/getSpacing",[["default",["getSpacing"],function(v){getSpacing=v}]]);_b5a‚Äç.w("./types/getShadows",[["default",["getShadows"],function(v){getShadows=v}]]);_b5a‚Äç.w("./types/getBreakpoints",[["default",["getBreakpoints"],function(v){getBreakpoints=v}]]);_b5a‚Äç.w("./types/getRadius",[["default",["getRadius"],function(v){getRadius=v}]]);








const emojis = {
  color: 'üé®',
  typography: 'üñã ',
  spacing: 'üìê',
  shadow: 'üåö',
  breakpoint: 'üç™',
  radius: 'üåÄ'
}

const genFile = (name, tokens, outDir) =>
  fs.writeFile(
    `${outDir}/${name}.json`,
    JSON.stringify(tokens, null, 2),
    err => {
      if (err) {
        throw new Error(`\x1b[31m\n\n‚ùå ${err}\n\n`)
      }
      // eslint-disable-next-line no-console
      console.log(
        `\x1b[32m ${
          emojis[name]
        } ${name.toUpperCase()} tokens created!\x1b[0m\n`
      )
    }
  )

const genTokens = (apikey, id, outDir) => {
  // eslint-disable-next-line no-console
  console.log('\x1b[40m üëü üöÄ  Connecting from mars... \x1b[0m\n')
  const FETCH_URL = `https://api.figma.com/v1/files/${id}`
  const FETCH_DATA = {
    method: 'GET',
    headers: {
      'X-Figma-Token': apikey
    }
  }

  try {
    fetch(FETCH_URL, FETCH_DATA)
      .then(response => {
        // eslint-disable-next-line no-console
        console.log(
          ' Connection with Figma is successful...\n\n----------------\n'
        )
        return response.json()
      })
      .then(styles => {
        if (styles.status !== 403 && styles.status !== 404) {
          const figmaTree = styles.document.children[0].children

          genFile('color', getColors('Colors', figmaTree), outDir)
          genFile('spacing', getSpacing('Spacings', figmaTree), outDir)
          genFile('typography', getTypography('Typography', figmaTree), outDir)
          genFile('shadow', getShadows('Shadows', figmaTree), outDir)
          genFile('radius', getRadius('Radius', figmaTree), outDir)
          genFile(
            'breakpoint',
            getBreakpoints('Breakpoints', figmaTree),
            outDir
          )
        }
      })
      .catch(err => {
        throw new Error(`\x1b[31m\n\n‚ùå ${err}\n\n`)
      })
  } catch (err) {
    throw new Error(`\x1b[31m\n\n‚ùå ${err}\n\n`)
  }
}

_b5a‚Äç.d(genTokens);
